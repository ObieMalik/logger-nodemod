{"version":3,"file":"logger.spec.js","sourceRoot":"","sources":["../../test/logger.spec.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAsC;AAEtC,yBAAwB;AAExB,SAAS,CAAC,GAAS,EAAE;IACjB,IAAI;QACA,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,CAAC,CAAA;QACxD,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,EAAE,OAAO,CAAC,CAAA;KAC7D;IAAC,OAAO,GAAG,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;KACrB;AACL,CAAC,CAAA,CAAC,CAAA;AAEF,QAAQ,CAAC,GAAS,EAAE;IAChB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;IAC7B,IAAI;QACA,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE;YACzB,SAAS,EAAE,IAAI;YACf,KAAK,EAAE,IAAI;SACd,CAAC,CAAA;QAEF,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;KACvB;IACD,OAAO,GAAG,EAAE;QACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;KACrB;AACL,CAAC,CAAA,CAAC,CAAA;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IACzB,cAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAA;IAE7D,EAAE,CAAC,8CAA8C,EAAE,GAAS,EAAE;QAC1D,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC,CAAA;QAE/D,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CACxC,gDAAgD,CACnD,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAA;IAEF,EAAE,CAAC,oDAAoD,EAAE,GAAS,EAAE;QAChE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAA;QAEjE,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAC5C,gDAAgD,CACnD,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import { logger } from '../dist/index'\n\nimport * as fs from 'fs'\n\nbeforeAll(async () => {\n    try {\n        await fs.promises.writeFile('logs/all.log', '', 'utf-8')\n        await fs.promises.writeFile('logs/error.log', '', 'utf-8')\n    } catch (err) {\n        console.error(err)\n    }\n})\n\nafterAll(async () => {\n    console.log('Cleaning up...')\n    try {\n        await fs.promises.rm('logs', {\n            recursive: true,\n            force: true\n        })\n        \n        console.log('done.')\n    }\n    catch (err) {\n        console.error(err)\n    }\n})\n\ndescribe('logger.info', () => {\n    logger.info('Test run log information using winston logger.')\n\n    it('should be able to log info to \"all.log\" file', async () => {\n        const data = await fs.promises.readFile('logs/all.log', 'utf8')\n\n        expect(data).toEqual(expect.stringContaining(\n            'Test run log information using winston logger.'\n        ))\n    })\n\n    it('should NOT be able to log info to \"error.log\" file', async () => {\n        const data = await fs.promises.readFile('logs/error.log', 'utf8')\n\n        expect(data).toEqual(expect.not.stringContaining(\n            'Test run log information using winston logger.'\n        ))\n    })\n})"]}