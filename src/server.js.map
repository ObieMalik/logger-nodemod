{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":";;AAAA,6BAA4B;AAC5B,iCAAgC;AAGhC,+BAA2B;AAE3B,uBAAoB;AACpB,wBAAqB;AACrB,sBAAmB;AAEnB,gEAA4D;AAE5D;IAOC;QACC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,GAAG,CAAE,aAAa,CAAE,CAAA;QAC3D,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,GAAG,CAAE,aAAa,CAAE,CAAA;IAC5D,CAAC;IAEM,OAAO;QACb,4BAAY,CAAC,QAAQ,CAAC,eAAe,CAAE,MAAM,CAAC,GAAG,CAAE,wBAAwB,CAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAE,MAAM,CAAC,GAAG,CAAE,wBAAwB,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC,CAAE,CAAA;QAE/I,IAAI,CAAC,OAAO,GAAG,IAAI,SAAG,EAAE,CAAC,OAAO,CAAA;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE,CAAA;IAC1C,CAAC;IAEO,MAAM,CAAE,OAA4B;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAE,OAAO,CAAE,CAAA;QAEzC,MAAM,CAAC,MAAM,CAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;YACzC,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO,CAAA;YACnC,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,CAAA;YAEhC,MAAM,CAAC,IAAI,CAAE,8BAA8B,EAAE,IAAI,EAAE,IAAI,CAAE,CAAA;QAC1D,CAAC,CAAE,CAAA;QAEH,MAAM,CAAC,MAAM,CAAA;IACd,CAAC;CACD;AA/BD,wBA+BC","sourcesContent":["import * as http from 'http'\nimport * as config from 'config'\nimport * as express from 'express'\n\nimport { App } from './app'\n\nimport './lib/error'\nimport './lib/logger'\nimport './lib/http'\n\nimport { EventEmitter } from './utils/events/event.emitter';\n\nexport class Server {\n\tprivate host: any\n\tprivate port: any\n\n\tpublic server: any\n\tpublic express: express.Application\n\n\tconstructor() {\n\t\tthis.host = process.env.HOST || config.get( 'server.host' )\n\t\tthis.port = process.env.PORT || config.get( 'server.port' )\n\t}\n\n\tpublic connect() {\n\t\tEventEmitter.instance.setMaxListeners( config.has( 'events.listeners.limit' ) ? Number.parseInt( config.get( 'events.listeners.limit' ) ) : 0 )\n\n\t\tthis.express = new App().express\n\t\tthis.server = this.listen( this.express )\n\t}\n\n\tprivate listen( express: express.Application ) {\n\t\tlet server = http.createServer( express )\n\n\t\tserver.listen( this.port, this.host, () => {\n\t\t\tlet host = server.address().address\n\t\t\tlet port = server.address().port\n\n\t\t\tlogger.info( 'Server start at http://%s:%s', host, port )\n\t\t} )\n\n\t\treturn server\n\t}\n}"]}