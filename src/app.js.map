{"version":3,"file":"app.js","sourceRoot":"","sources":["app.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express'\nimport * as bodyParser from 'body-parser'\nimport * as morgan from 'morgan'\nimport * as config from 'config'\n\n// import { ApiRouter } from './api/v1/router'\n\ndeclare global {\n\texport namespace Express {\n\t\texport interface Response {\n\t\t\tsuccess(): express.Response\n\t\t\tsuccess( data: any ): express.Response\n\t\t\tsuccess( data: any, message: string ): express.Response\n\n\t\t\terror(): express.Response\n\t\t\terror( error: Error ): express.Response\n\t\t}\n\t}\n}\n\nexport class App {\n\n\tpublic express: express.Application\n\n\tconstructor() {\n\t\tthis.express = express()\n\t\tthis.middleware()\n\t\tthis.routes()\n\t}\n\n\tprivate middleware(): void {\n\t\tlet jsonParser = bodyParser.json()\n\t\tlet urlEncoded = bodyParser.urlencoded( { extended: true } )\n\t\tlet logger = morgan( 'combined' )\n\n\t\tthis.express.use( jsonParser )\n\t\tthis.express.use( urlEncoded )\n\t\tthis.express.use( logger )\n\n\t\tthis.express.use( this.successHandler )\n\t\tthis.express.use( this.errorHandler )\n\n\t\tthis.express.use( this.responseHeaders )\n\t}\n\n\tprivate routes(): void {\n\t\tif ( !config.has( 'app.service.path' ) ) {\n\t\t\tthrow new NullError( '[App:routes] Server path \"app.service.path\" configuration is missing. Fix it loser...' )\n\t\t}\n\n\t\tif ( !config.has( 'app.name' ) ) {\n\t\t\tthrow new NullError( '[App:routes] Server name \"app.name\" configuration is missing. C\\'mon...' )\n\t\t}\n\n\t\tlet router = express.Router()\n\t\tlet path = '/' + config.get( 'app.service.path' ).toString()\n\n\t\tthis.express.use( '/', router )\n\t\trouter.get( path, ( req: express.Request, res: express.Response ) => {\n\t\t\tres.status( 200 )\n\t\t\t\t.send( 'Hi. I\\'m the ' + config.get( 'app.name' ).toString() + ' API. I\\'m resting over here...' )\n\t\t} )\n\n\t\t// this.express.use( '/v1', ApiRouter.instance.router )\n\t}\n\n\tprivate successHandler( req: express.Request, res: express.Response, next: express.NextFunction ): void {\n\t\tlet self = this\n\t\tres.success = function ( data?: any, message?: string ): express.Response {\n\t\t\treturn res.json( {\n\t\t\t\tsuccess: true,\n\t\t\t\tmessage: message || null,\n\t\t\t\terror: null,\n\t\t\t\tdata: data || null\n\t\t\t} )\n\t\t}\n\n\t\tnext()\n\t}\n\n\tprivate errorHandler( req: express.Request, res: express.Response, next: express.NextFunction ): void {\n\t\tres.error = function ( error?: Error, data?: any ): express.Response {\n\t\t\treturn res\n\t\t\t\t.status( App.errorToHttp( error ) )\n\t\t\t\t.json( {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tmessage: ( error && error.message ) ? error.message : null,\n\t\t\t\t\terror: error || null,\n\t\t\t\t\tdata: data || null\n\t\t\t\t} )\n\t\t}\n\n\t\tnext()\n\t}\n\n\tprivate responseHeaders( req: express.Request, res: express.Response, next: express.NextFunction ): void {\n\t\tres.header( 'Access-Control-Allow-Origin', '*' )\n\t\tres.header( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept' )\n\n\t\tnext()\n\t}\n\n\tprivate static errorToHttp( error: Error ): HTTPStatus {\n\t\tif ( error instanceof ValidationError ) { return HTTPStatus.BAD_REQUEST }\n\t\telse if ( error instanceof AuthorizationError ) { return HTTPStatus.UNAUTHORIZED }\n\t\telse if ( error instanceof NullError ) { return HTTPStatus.NOT_FOUND }\n\t\telse if ( error instanceof ConflictError ) { return HTTPStatus.CONFLICT }\n\t\telse if ( error instanceof ExpirationError ) { return HTTPStatus.FORBIDDEN }\n\t\telse if ( error instanceof NotImplementedError ) { return HTTPStatus.METHOD_NOT_ALLOWED }\n\t\telse { return HTTPStatus.INTERNAL_SERVER_ERROR }\n\t}\n\n}"]}